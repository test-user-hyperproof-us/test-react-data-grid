/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VariableRowHeightImport } from './routes/VariableRowHeight'
import { Route as TreeViewImport } from './routes/TreeView'
import { Route as ScrollToCellImport } from './routes/ScrollToCell'
import { Route as RowsReorderingImport } from './routes/RowsReordering'
import { Route as RowGroupingImport } from './routes/RowGrouping'
import { Route as ResizableGridImport } from './routes/ResizableGrid'
import { Route as NoRowsImport } from './routes/NoRows'
import { Route as MillionCellsImport } from './routes/MillionCells'
import { Route as MasterDetailImport } from './routes/MasterDetail'
import { Route as InfiniteScrollingImport } from './routes/InfiniteScrolling'
import { Route as HeaderFiltersImport } from './routes/HeaderFilters'
import { Route as CustomizableRenderersImport } from './routes/CustomizableRenderers'
import { Route as ContextMenuImport } from './routes/ContextMenu'
import { Route as CommonFeaturesImport } from './routes/CommonFeatures'
import { Route as ColumnsReorderingImport } from './routes/ColumnsReordering'
import { Route as ColumnSpanningImport } from './routes/ColumnSpanning'
import { Route as ColumnGroupingImport } from './routes/ColumnGrouping'
import { Route as CellNavigationImport } from './routes/CellNavigation'
import { Route as AnimationImport } from './routes/Animation'
import { Route as AllFeaturesImport } from './routes/AllFeatures'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const VariableRowHeightRoute = VariableRowHeightImport.update({
  id: '/VariableRowHeight',
  path: '/VariableRowHeight',
  getParentRoute: () => rootRoute,
} as any)

const TreeViewRoute = TreeViewImport.update({
  id: '/TreeView',
  path: '/TreeView',
  getParentRoute: () => rootRoute,
} as any)

const ScrollToCellRoute = ScrollToCellImport.update({
  id: '/ScrollToCell',
  path: '/ScrollToCell',
  getParentRoute: () => rootRoute,
} as any)

const RowsReorderingRoute = RowsReorderingImport.update({
  id: '/RowsReordering',
  path: '/RowsReordering',
  getParentRoute: () => rootRoute,
} as any)

const RowGroupingRoute = RowGroupingImport.update({
  id: '/RowGrouping',
  path: '/RowGrouping',
  getParentRoute: () => rootRoute,
} as any)

const ResizableGridRoute = ResizableGridImport.update({
  id: '/ResizableGrid',
  path: '/ResizableGrid',
  getParentRoute: () => rootRoute,
} as any)

const NoRowsRoute = NoRowsImport.update({
  id: '/NoRows',
  path: '/NoRows',
  getParentRoute: () => rootRoute,
} as any)

const MillionCellsRoute = MillionCellsImport.update({
  id: '/MillionCells',
  path: '/MillionCells',
  getParentRoute: () => rootRoute,
} as any)

const MasterDetailRoute = MasterDetailImport.update({
  id: '/MasterDetail',
  path: '/MasterDetail',
  getParentRoute: () => rootRoute,
} as any)

const InfiniteScrollingRoute = InfiniteScrollingImport.update({
  id: '/InfiniteScrolling',
  path: '/InfiniteScrolling',
  getParentRoute: () => rootRoute,
} as any)

const HeaderFiltersRoute = HeaderFiltersImport.update({
  id: '/HeaderFilters',
  path: '/HeaderFilters',
  getParentRoute: () => rootRoute,
} as any)

const CustomizableRenderersRoute = CustomizableRenderersImport.update({
  id: '/CustomizableRenderers',
  path: '/CustomizableRenderers',
  getParentRoute: () => rootRoute,
} as any)

const ContextMenuRoute = ContextMenuImport.update({
  id: '/ContextMenu',
  path: '/ContextMenu',
  getParentRoute: () => rootRoute,
} as any)

const CommonFeaturesRoute = CommonFeaturesImport.update({
  id: '/CommonFeatures',
  path: '/CommonFeatures',
  getParentRoute: () => rootRoute,
} as any)

const ColumnsReorderingRoute = ColumnsReorderingImport.update({
  id: '/ColumnsReordering',
  path: '/ColumnsReordering',
  getParentRoute: () => rootRoute,
} as any)

const ColumnSpanningRoute = ColumnSpanningImport.update({
  id: '/ColumnSpanning',
  path: '/ColumnSpanning',
  getParentRoute: () => rootRoute,
} as any)

const ColumnGroupingRoute = ColumnGroupingImport.update({
  id: '/ColumnGrouping',
  path: '/ColumnGrouping',
  getParentRoute: () => rootRoute,
} as any)

const CellNavigationRoute = CellNavigationImport.update({
  id: '/CellNavigation',
  path: '/CellNavigation',
  getParentRoute: () => rootRoute,
} as any)

const AnimationRoute = AnimationImport.update({
  id: '/Animation',
  path: '/Animation',
  getParentRoute: () => rootRoute,
} as any)

const AllFeaturesRoute = AllFeaturesImport.update({
  id: '/AllFeatures',
  path: '/AllFeatures',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/AllFeatures': {
      id: '/AllFeatures'
      path: '/AllFeatures'
      fullPath: '/AllFeatures'
      preLoaderRoute: typeof AllFeaturesImport
      parentRoute: typeof rootRoute
    }
    '/Animation': {
      id: '/Animation'
      path: '/Animation'
      fullPath: '/Animation'
      preLoaderRoute: typeof AnimationImport
      parentRoute: typeof rootRoute
    }
    '/CellNavigation': {
      id: '/CellNavigation'
      path: '/CellNavigation'
      fullPath: '/CellNavigation'
      preLoaderRoute: typeof CellNavigationImport
      parentRoute: typeof rootRoute
    }
    '/ColumnGrouping': {
      id: '/ColumnGrouping'
      path: '/ColumnGrouping'
      fullPath: '/ColumnGrouping'
      preLoaderRoute: typeof ColumnGroupingImport
      parentRoute: typeof rootRoute
    }
    '/ColumnSpanning': {
      id: '/ColumnSpanning'
      path: '/ColumnSpanning'
      fullPath: '/ColumnSpanning'
      preLoaderRoute: typeof ColumnSpanningImport
      parentRoute: typeof rootRoute
    }
    '/ColumnsReordering': {
      id: '/ColumnsReordering'
      path: '/ColumnsReordering'
      fullPath: '/ColumnsReordering'
      preLoaderRoute: typeof ColumnsReorderingImport
      parentRoute: typeof rootRoute
    }
    '/CommonFeatures': {
      id: '/CommonFeatures'
      path: '/CommonFeatures'
      fullPath: '/CommonFeatures'
      preLoaderRoute: typeof CommonFeaturesImport
      parentRoute: typeof rootRoute
    }
    '/ContextMenu': {
      id: '/ContextMenu'
      path: '/ContextMenu'
      fullPath: '/ContextMenu'
      preLoaderRoute: typeof ContextMenuImport
      parentRoute: typeof rootRoute
    }
    '/CustomizableRenderers': {
      id: '/CustomizableRenderers'
      path: '/CustomizableRenderers'
      fullPath: '/CustomizableRenderers'
      preLoaderRoute: typeof CustomizableRenderersImport
      parentRoute: typeof rootRoute
    }
    '/HeaderFilters': {
      id: '/HeaderFilters'
      path: '/HeaderFilters'
      fullPath: '/HeaderFilters'
      preLoaderRoute: typeof HeaderFiltersImport
      parentRoute: typeof rootRoute
    }
    '/InfiniteScrolling': {
      id: '/InfiniteScrolling'
      path: '/InfiniteScrolling'
      fullPath: '/InfiniteScrolling'
      preLoaderRoute: typeof InfiniteScrollingImport
      parentRoute: typeof rootRoute
    }
    '/MasterDetail': {
      id: '/MasterDetail'
      path: '/MasterDetail'
      fullPath: '/MasterDetail'
      preLoaderRoute: typeof MasterDetailImport
      parentRoute: typeof rootRoute
    }
    '/MillionCells': {
      id: '/MillionCells'
      path: '/MillionCells'
      fullPath: '/MillionCells'
      preLoaderRoute: typeof MillionCellsImport
      parentRoute: typeof rootRoute
    }
    '/NoRows': {
      id: '/NoRows'
      path: '/NoRows'
      fullPath: '/NoRows'
      preLoaderRoute: typeof NoRowsImport
      parentRoute: typeof rootRoute
    }
    '/ResizableGrid': {
      id: '/ResizableGrid'
      path: '/ResizableGrid'
      fullPath: '/ResizableGrid'
      preLoaderRoute: typeof ResizableGridImport
      parentRoute: typeof rootRoute
    }
    '/RowGrouping': {
      id: '/RowGrouping'
      path: '/RowGrouping'
      fullPath: '/RowGrouping'
      preLoaderRoute: typeof RowGroupingImport
      parentRoute: typeof rootRoute
    }
    '/RowsReordering': {
      id: '/RowsReordering'
      path: '/RowsReordering'
      fullPath: '/RowsReordering'
      preLoaderRoute: typeof RowsReorderingImport
      parentRoute: typeof rootRoute
    }
    '/ScrollToCell': {
      id: '/ScrollToCell'
      path: '/ScrollToCell'
      fullPath: '/ScrollToCell'
      preLoaderRoute: typeof ScrollToCellImport
      parentRoute: typeof rootRoute
    }
    '/TreeView': {
      id: '/TreeView'
      path: '/TreeView'
      fullPath: '/TreeView'
      preLoaderRoute: typeof TreeViewImport
      parentRoute: typeof rootRoute
    }
    '/VariableRowHeight': {
      id: '/VariableRowHeight'
      path: '/VariableRowHeight'
      fullPath: '/VariableRowHeight'
      preLoaderRoute: typeof VariableRowHeightImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  id:
    | '__root__'
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllFeaturesRoute: typeof AllFeaturesRoute
  AnimationRoute: typeof AnimationRoute
  CellNavigationRoute: typeof CellNavigationRoute
  ColumnGroupingRoute: typeof ColumnGroupingRoute
  ColumnSpanningRoute: typeof ColumnSpanningRoute
  ColumnsReorderingRoute: typeof ColumnsReorderingRoute
  CommonFeaturesRoute: typeof CommonFeaturesRoute
  ContextMenuRoute: typeof ContextMenuRoute
  CustomizableRenderersRoute: typeof CustomizableRenderersRoute
  HeaderFiltersRoute: typeof HeaderFiltersRoute
  InfiniteScrollingRoute: typeof InfiniteScrollingRoute
  MasterDetailRoute: typeof MasterDetailRoute
  MillionCellsRoute: typeof MillionCellsRoute
  NoRowsRoute: typeof NoRowsRoute
  ResizableGridRoute: typeof ResizableGridRoute
  RowGroupingRoute: typeof RowGroupingRoute
  RowsReorderingRoute: typeof RowsReorderingRoute
  ScrollToCellRoute: typeof ScrollToCellRoute
  TreeViewRoute: typeof TreeViewRoute
  VariableRowHeightRoute: typeof VariableRowHeightRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllFeaturesRoute: AllFeaturesRoute,
  AnimationRoute: AnimationRoute,
  CellNavigationRoute: CellNavigationRoute,
  ColumnGroupingRoute: ColumnGroupingRoute,
  ColumnSpanningRoute: ColumnSpanningRoute,
  ColumnsReorderingRoute: ColumnsReorderingRoute,
  CommonFeaturesRoute: CommonFeaturesRoute,
  ContextMenuRoute: ContextMenuRoute,
  CustomizableRenderersRoute: CustomizableRenderersRoute,
  HeaderFiltersRoute: HeaderFiltersRoute,
  InfiniteScrollingRoute: InfiniteScrollingRoute,
  MasterDetailRoute: MasterDetailRoute,
  MillionCellsRoute: MillionCellsRoute,
  NoRowsRoute: NoRowsRoute,
  ResizableGridRoute: ResizableGridRoute,
  RowGroupingRoute: RowGroupingRoute,
  RowsReorderingRoute: RowsReorderingRoute,
  ScrollToCellRoute: ScrollToCellRoute,
  TreeViewRoute: TreeViewRoute,
  VariableRowHeightRoute: VariableRowHeightRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/AllFeatures",
        "/Animation",
        "/CellNavigation",
        "/ColumnGrouping",
        "/ColumnSpanning",
        "/ColumnsReordering",
        "/CommonFeatures",
        "/ContextMenu",
        "/CustomizableRenderers",
        "/HeaderFilters",
        "/InfiniteScrolling",
        "/MasterDetail",
        "/MillionCells",
        "/NoRows",
        "/ResizableGrid",
        "/RowGrouping",
        "/RowsReordering",
        "/ScrollToCell",
        "/TreeView",
        "/VariableRowHeight"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/AllFeatures": {
      "filePath": "AllFeatures.tsx"
    },
    "/Animation": {
      "filePath": "Animation.tsx"
    },
    "/CellNavigation": {
      "filePath": "CellNavigation.tsx"
    },
    "/ColumnGrouping": {
      "filePath": "ColumnGrouping.tsx"
    },
    "/ColumnSpanning": {
      "filePath": "ColumnSpanning.tsx"
    },
    "/ColumnsReordering": {
      "filePath": "ColumnsReordering.tsx"
    },
    "/CommonFeatures": {
      "filePath": "CommonFeatures.tsx"
    },
    "/ContextMenu": {
      "filePath": "ContextMenu.tsx"
    },
    "/CustomizableRenderers": {
      "filePath": "CustomizableRenderers.tsx"
    },
    "/HeaderFilters": {
      "filePath": "HeaderFilters.tsx"
    },
    "/InfiniteScrolling": {
      "filePath": "InfiniteScrolling.tsx"
    },
    "/MasterDetail": {
      "filePath": "MasterDetail.tsx"
    },
    "/MillionCells": {
      "filePath": "MillionCells.tsx"
    },
    "/NoRows": {
      "filePath": "NoRows.tsx"
    },
    "/ResizableGrid": {
      "filePath": "ResizableGrid.tsx"
    },
    "/RowGrouping": {
      "filePath": "RowGrouping.tsx"
    },
    "/RowsReordering": {
      "filePath": "RowsReordering.tsx"
    },
    "/ScrollToCell": {
      "filePath": "ScrollToCell.tsx"
    },
    "/TreeView": {
      "filePath": "TreeView.tsx"
    },
    "/VariableRowHeight": {
      "filePath": "VariableRowHeight.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
